version: 2.1

# Definición de los trabajos (jobs)
jobs:
  # Trabajo de Build y Pruebas
  build-and-test:
    docker:
      - image: cimg/python:3.9
      - image: redis:alpine
        name: redis-final
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Instalar dependencias
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install pytest redis pytest-cov black ggshield
      - run:
          name: Ejecutar pruebas
          environment:
            REDIS_HOST: redis-final
            REDIS_PORT: 6379
          command: |
            . venv/bin/activate
            pytest tests/ --cov=. --cov-report=html:test-results/coverage-html
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-reports

  # Trabajo de despliegue (deploy)
  deploy:
    docker:
      - image: cimg/base:2024.02
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Verificar variables de entorno para Docker
          command: |
            if [ -z "$DOCKERHUB_USER" ] || [ -z "$IMAGE_NAME" ] || [ -z "$CIRCLE_SHA1" ]; then
              echo "Error: Una o más variables están vacías. DOCKERHUB_USER=$DOCKERHUB_USER IMAGE_NAME=$IMAGE_NAME CIRCLE_SHA1=$CIRCLE_SHA1"
              exit 1
            fi
            echo "DOCKERHUB_USER: $DOCKERHUB_USER"
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "CIRCLE_SHA1: $CIRCLE_SHA1"
      - run:
          name: Construir imagen Docker
          command: |
            docker build -t "$DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1" .
      - run:
          name: Login a Docker Hub
          command: |
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
      - run:
          name: Push imagen a Docker Hub
          command: |
            docker push "$DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"

  # Trabajo de actualización de manifiestos de Kubernetes
  update-k8s-manifests:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout  # Clonar el repositorio
      - run:
          name: Limpiar y Clonar repositorio de manifiestos
          command: |
            # Eliminar el directorio 'manifests' si ya existe
            if [ -d "manifests" ]; then
              rm -rf manifests
            fi
            # Clonar el repositorio
            git clone https://github.com/RAMON1743/app-practica-cicd-Ramon-Meza.git manifests
      - run:
          name: Verificar contenido del directorio de manifiestos
          command: |
            # Verificar el contenido del directorio después de clonar
            ls -l manifests
            # Verificar que deployment.yaml existe en el directorio correcto
            ls -l manifests/deployment.yaml || echo "No se encontró el archivo deployment.yaml"
      - run:
          name: Actualizar imagen en manifiestos con envsubst
          command: |
            # Verificar el contenido del archivo antes de usar envsubst
            cat manifests/deployment.yaml
            # Usar envsubst para reemplazar las variables en el archivo deployment.yaml
            envsubst < manifests/deployment.yaml > manifests/deployment_updated.yaml
            # Verificar que la imagen haya sido actualizada
            cat manifests/deployment_updated.yaml
            # Sobrescribir el archivo original con el actualizado
            mv manifests/deployment_updated.yaml manifests/deployment.yaml
      - run:
          name: Commit y Push de cambios
          command: |
            cd manifests
            git add .
            git commit -m "Actualizar imagen a $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"
            git push https://github.com/RAMON1743/app-practica-cicd-Ramon-Meza.git main

# Definición del workflow
workflows:
  build-test-deploy:
    jobs:
      - build-and-test
      - deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main
      - update-k8s-manifests:
          requires:
            - deploy
          filters:
            branches:
              only:
                - main
