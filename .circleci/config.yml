version: 2.1

# Definición de los trabajos (jobs)
jobs:
  # Trabajo de Build y Pruebas
  build-and-test:
    docker:
      - image: cimg/python:3.9
      - image: redis:alpine
        name: redis-final
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Instalar dependencias
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install -r requirements.txt
            pip install pytest redis pytest-cov black ggshield
      - run:
          name: Ejecutar pruebas
          environment:
            REDIS_HOST: redis-final
            REDIS_PORT: 6379
          command: |
            . venv/bin/activate
            pytest tests/ --cov=. --cov-report=html:test-results/coverage-html
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: test-reports

  # Trabajo de despliegue (deploy)
  deploy:
    docker:
      - image: cimg/base:2024.02
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Verificar variables de entorno para Docker
          command: |
            if [ -z "$DOCKERHUB_USER" ] || [ -z "$IMAGE_NAME" ] || [ -z "$CIRCLE_SHA1" ]; then
              echo "Error: Una o más variables están vacías. DOCKERHUB_USER=$DOCKERHUB_USER IMAGE_NAME=$IMAGE_NAME CIRCLE_SHA1=$CIRCLE_SHA1"
              exit 1
            fi
            echo "DOCKERHUB_USER: $DOCKERHUB_USER"
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "CIRCLE_SHA1: $CIRCLE_SHA1"
      - run:
          name: Construir imagen Docker
          command: |
            docker build -t "$DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1" .
      - run:
          name: Login a Docker Hub
          command: |
            echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin
      - run:
          name: Push imagen a Docker Hub
          command: |
            docker push "$DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"

  # Trabajo de actualización de manifiestos de Kubernetes
  update-k8s-manifests:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout  # Clonar el repositorio
      - run:
          name: Limpiar y Clonar repositorio de manifiestos
          command: |
            # Eliminar el directorio 'manifests' si ya existe
            if [ -d "manifests" ]; then
              rm -rf manifests
            fi
            # Clonar el repositorio
            git clone git@github.com:RAMON1743/app-practica-cicd-Ramon-Meza.git manifests
      - run:
          name: Crear un nuevo archivo con la imagen actualizada
          command: |
            cd manifests
            # Crear un nuevo archivo de manifiesto actualizando la imagen
            sed "s|image: .*|image: $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1|g" deployment.yaml > new-deployment.yaml
            # Verificar que el nuevo archivo haya sido creado correctamente
            cat new-deployment.yaml
      - run:
          name: Commit y Push de cambios
          command: |
            cd manifests
            git add new-deployment.yaml
            git commit -m "Crear nuevo manifiesto con imagen actualizada a $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"
            git push origin main  # Usando 'origin' como el remoto por defecto en lugar de URL completa

# Definición del workflow
workflows:
  build-test-deploy:
    jobs:
      - build-and-test
      - deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - main
      - update-k8s-manifests:
          requires:
            - deploy
          filters:
            branches:
              only:
                - main
