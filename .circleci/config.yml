version: 2.1

# Definición de los trabajos (jobs)
jobs:
  # Trabajo de Build y Pruebas
  build-and-test:
    docker:
      # Imagen de Python y Redis
      - image: cimg/python:3.9
      - image: redis:alpine
        name: redis-final
    steps:
      - checkout  # Clonar el repositorio
      - setup_remote_docker:
          docker_layer_caching: true  # Caching de capas Docker para optimizar tiempos
      - run:
          name: Instalar dependencias
          command: |
            python3 -m venv venv  # Crear entorno virtual
            . venv/bin/activate  # Activar entorno virtual
            pip install -r requirements.txt  # Instalar dependencias desde requirements.txt
            pip install pytest redis pytest-cov black ggshield  # Instalar dependencias adicionales
      - run:
          name: Ejecutar pruebas
          environment:
            REDIS_HOST: redis-final  # Usar nombre del contenedor redis como host
            REDIS_PORT: 6379  # Puerto de Redis
          command: |
            . venv/bin/activate  # Activar entorno virtual
            pytest tests/ --cov=. --cov-report=html:test-results/coverage-html  # Ejecutar pruebas
      - store_test_results:
          path: test-results  # Guardar los resultados de las pruebas
      - store_artifacts:
          path: test-results  # Almacenar los informes de pruebas
          destination: test-reports

  # Trabajo de despliegue (deploy)
  deploy:
    docker:
      - image: cimg/base:2024.02  # Usar una imagen base para construir la imagen Docker
    steps:
      - checkout  # Clonar el repositorio
      - setup_remote_docker:
          docker_layer_caching: true  # Caching de capas Docker para optimizar tiempos
      - run:
          name: Verificar variables de entorno para Docker
          command: |
            if [ -z "$DOCKERHUB_USER" ] || [ -z "$IMAGE_NAME" ] || [ -z "$CIRCLE_SHA1" ]; then
              echo "Error: Una o más variables están vacías. DOCKERHUB_USER=$DOCKERHUB_USER IMAGE_NAME=$IMAGE_NAME CIRCLE_SHA1=$CIRCLE_SHA1"
              exit 1
            fi
            echo "DOCKERHUB_USER: $DOCKERHUB_USER"
            echo "IMAGE_NAME: $IMAGE_NAME"
            echo "CIRCLE_SHA1: $CIRCLE_SHA1"
      - run:
          name: Construir imagen Docker
          command: |
            docker build -t "$DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1" .  # Construir imagen Docker con tag basado en SHA
      - run:
          name: Login a Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin  # Login en Docker Hub
      - run:
          name: Push imagen a Docker Hub
          command: |
            docker push "$DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"  # Subir imagen a Docker Hub

  # Trabajo de actualización de manifiestos de Kubernetes
  update-k8s-manifests:
    docker:
      - image: cimg/python:3.9  # Usar imagen de Python para trabajar con los manifiestos
    steps:
      - checkout  # Clonar el repositorio
      - run:
          name: Eliminar el directorio 'manifests' si existe
          command: |
            if [ -d "manifests" ]; then
              rm -rf manifests  # Eliminar directorio 'manifests' si ya existe
            fi
      - run:
          name: Clonar repositorio de manifiestos
          command: |
            git clone git@github.com:RAMON1743/app-practica-cicd-Ramon-Meza.git manifests  # Clonar el repo con la clave SSH
      - run:
          name: Verificar archivos en manifests
          command: |
            ls -la manifests  # Listar archivos en el directorio 'manifests' para asegurarte de que deployment.yaml existe
      - run:
          name: Actualizar imagen en manifiestos
          command: |
            cd manifests
            sed -i "s|image: .*|image: $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1|g" deployment.yaml  # Actualizar imagen en deployment.yaml
      - run:
          name: Commit y Push de cambios
          command: |
            cd manifests
            git add .  # Agregar cambios
            git commit -m "Actualizar imagen a $DOCKERHUB_USER/$IMAGE_NAME:$CIRCLE_SHA1"  # Commit con mensaje
            git push git@github.com:RAMON1743/app-practica-cicd-Ramon-Meza.git main  # Push de cambios

# Definición del workflow
workflows:
  build-test-deploy:
    jobs:
      - build-and-test  # Ejecutar build y pruebas primero
      - deploy:
          requires:
            - build-and-test  # El deploy solo se ejecuta si las pruebas son exitosas
          filters:
            branches:
              only:
                - main  # Solo para la rama main
      - update-k8s-manifests:
          requires:
            - deploy  # Actualizar los manifiestos después del deploy
          filters:
            branches:
              only:
                - main  # Solo para la rama main
